//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBusinessLogicLibrary.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MerkFinanceEntities : DbContext
    {
        public MerkFinanceEntities()
            : base("name=MerkFinanceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Application_p> Application_p { get; set; }
        public virtual DbSet<AppointmentDoctor_cu> AppointmentDoctor_cu { get; set; }
        public virtual DbSet<AppointmentService_cu> AppointmentService_cu { get; set; }
        public virtual DbSet<AppointmentStatus_p> AppointmentStatus_p { get; set; }
        public virtual DbSet<AppointmentTransaction> AppointmentTransactions { get; set; }
        public virtual DbSet<AppointmentTransactionSendingDetail> AppointmentTransactionSendingDetails { get; set; }
        public virtual DbSet<AppointmentType_cu> AppointmentType_cu { get; set; }
        public virtual DbSet<Bank_cu> Bank_cu { get; set; }
        public virtual DbSet<BankAccount_cu> BankAccount_cu { get; set; }
        public virtual DbSet<CashBox_cu> CashBox_cu { get; set; }
        public virtual DbSet<CashBoxInOutTransaction> CashBoxInOutTransactions { get; set; }
        public virtual DbSet<CashBoxPrintingConfiguration_cu> CashBoxPrintingConfiguration_cu { get; set; }
        public virtual DbSet<CashBoxTransactionSignatureType_p> CashBoxTransactionSignatureType_p { get; set; }
        public virtual DbSet<CashBoxTransactionType_p> CashBoxTransactionType_p { get; set; }
        public virtual DbSet<ChartOfAccount_cu> ChartOfAccount_cu { get; set; }
        public virtual DbSet<ChartOfAccountBalance> ChartOfAccountBalances { get; set; }
        public virtual DbSet<ChartOfAccountCodeMargin_p> ChartOfAccountCodeMargin_p { get; set; }
        public virtual DbSet<City_cu> City_cu { get; set; }
        public virtual DbSet<CommonTransactionType_p> CommonTransactionType_p { get; set; }
        public virtual DbSet<Company_cu> Company_cu { get; set; }
        public virtual DbSet<Country_cu> Country_cu { get; set; }
        public virtual DbSet<Currency_cu> Currency_cu { get; set; }
        public virtual DbSet<Customer_cu> Customer_cu { get; set; }
        public virtual DbSet<CustomerType_p> CustomerType_p { get; set; }
        public virtual DbSet<Department_cu> Department_cu { get; set; }
        public virtual DbSet<DepartmentType_p> DepartmentType_p { get; set; }
        public virtual DbSet<DiscountType_p> DiscountType_p { get; set; }
        public virtual DbSet<Doctor_cu> Doctor_cu { get; set; }
        public virtual DbSet<DoctorCategory_cu> DoctorCategory_cu { get; set; }
        public virtual DbSet<DoctorProfessionalFeesIssuingType_p> DoctorProfessionalFeesIssuingType_p { get; set; }
        public virtual DbSet<DoctorRank_p> DoctorRank_p { get; set; }
        public virtual DbSet<DoctorSpecialization_p> DoctorSpecialization_p { get; set; }
        public virtual DbSet<DoctorTaxType_cu> DoctorTaxType_cu { get; set; }
        public virtual DbSet<Employee_cu> Employee_cu { get; set; }
        public virtual DbSet<EmployeeType_cu> EmployeeType_cu { get; set; }
        public virtual DbSet<FinancialInterval_cu> FinancialInterval_cu { get; set; }
        public virtual DbSet<Floor_cu> Floor_cu { get; set; }
        public virtual DbSet<HeightUnit_p> HeightUnit_p { get; set; }
        public virtual DbSet<IdentificationCardType_p> IdentificationCardType_p { get; set; }
        public virtual DbSet<ImageType_p> ImageType_p { get; set; }
        public virtual DbSet<InsuranceCarrier_cu> InsuranceCarrier_cu { get; set; }
        public virtual DbSet<InsuranceCarrier_InsuranceLevel_cu> InsuranceCarrier_InsuranceLevel_cu { get; set; }
        public virtual DbSet<InsuranceLevel_cu> InsuranceLevel_cu { get; set; }
        public virtual DbSet<InventoryItem_cu> InventoryItem_cu { get; set; }
        public virtual DbSet<InventoryItem_PurchasingTax_cu> InventoryItem_PurchasingTax_cu { get; set; }
        public virtual DbSet<InventoryItem_RawMaterial_cu> InventoryItem_RawMaterial_cu { get; set; }
        public virtual DbSet<InventoryItem_SellingTax_cu> InventoryItem_SellingTax_cu { get; set; }
        public virtual DbSet<InventoryItem_UnitMeasurment_cu> InventoryItem_UnitMeasurment_cu { get; set; }
        public virtual DbSet<InventoryItemBrand_cu> InventoryItemBrand_cu { get; set; }
        public virtual DbSet<InventoryItemCategory_cu> InventoryItemCategory_cu { get; set; }
        public virtual DbSet<InventoryItemGroup_cu> InventoryItemGroup_cu { get; set; }
        public virtual DbSet<InventoryItemGroup_InventoryItem_cu> InventoryItemGroup_InventoryItem_cu { get; set; }
        public virtual DbSet<InventoryItemGrouping_cu> InventoryItemGrouping_cu { get; set; }
        public virtual DbSet<InventoryItemGroupingItem_cu> InventoryItemGroupingItem_cu { get; set; }
        public virtual DbSet<InventoryItemGroupType_P> InventoryItemGroupType_P { get; set; }
        public virtual DbSet<InventoryItemInvoicingStrategy_p> InventoryItemInvoicingStrategy_p { get; set; }
        public virtual DbSet<InventoryItemOffers_cu> InventoryItemOffers_cu { get; set; }
        public virtual DbSet<InventoryItemPrice_cu> InventoryItemPrice_cu { get; set; }
        public virtual DbSet<InventoryItemSize_cu> InventoryItemSize_cu { get; set; }
        public virtual DbSet<InventoryItemSize_P> InventoryItemSize_P { get; set; }
        public virtual DbSet<InventoryItemStatePurchasingType_p> InventoryItemStatePurchasingType_p { get; set; }
        public virtual DbSet<InventoryItemStateSellingType_p> InventoryItemStateSellingType_p { get; set; }
        public virtual DbSet<InventoryItemType_p> InventoryItemType_p { get; set; }
        public virtual DbSet<InventoryQueueTransactionStatus_p> InventoryQueueTransactionStatus_p { get; set; }
        public virtual DbSet<InventoryRequestTransfer> InventoryRequestTransfers { get; set; }
        public virtual DbSet<InventoryStore_cu> InventoryStore_cu { get; set; }
        public virtual DbSet<InventoryStore_Employee_cu> InventoryStore_Employee_cu { get; set; }
        public virtual DbSet<InventoryStoreCategory_cu> InventoryStoreCategory_cu { get; set; }
        public virtual DbSet<InventoryStoreTreeLinks_cu> InventoryStoreTreeLinks_cu { get; set; }
        public virtual DbSet<InventoryTrackingPeriod_cu> InventoryTrackingPeriod_cu { get; set; }
        public virtual DbSet<InventoryTrackingType_p> InventoryTrackingType_p { get; set; }
        public virtual DbSet<InventoryTransactionQueue> InventoryTransactionQueues { get; set; }
        public virtual DbSet<InventoryTransactionType_p> InventoryTransactionType_p { get; set; }
        public virtual DbSet<InventoryTransferTransaction> InventoryTransferTransactions { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceCostingStrategy_p> InvoiceCostingStrategy_p { get; set; }
        public virtual DbSet<InvoicePayment> InvoicePayments { get; set; }
        public virtual DbSet<InvoicePaymentType_p> InvoicePaymentType_p { get; set; }
        public virtual DbSet<InvoiceType_p> InvoiceType_p { get; set; }
        public virtual DbSet<JobTitle_cu> JobTitle_cu { get; set; }
        public virtual DbSet<Location_cu> Location_cu { get; set; }
        public virtual DbSet<Manager_cu> Manager_cu { get; set; }
        public virtual DbSet<MaritalStatus_p> MaritalStatus_p { get; set; }
        public virtual DbSet<MedicationCategory_cu> MedicationCategory_cu { get; set; }
        public virtual DbSet<MilitaryStatus_p> MilitaryStatus_p { get; set; }
        public virtual DbSet<Month_p> Month_p { get; set; }
        public virtual DbSet<Organization_Application_p> Organization_Application_p { get; set; }
        public virtual DbSet<Organization_cu> Organization_cu { get; set; }
        public virtual DbSet<Organization_p> Organization_p { get; set; }
        public virtual DbSet<PaginationConfiguration_cu> PaginationConfiguration_cu { get; set; }
        public virtual DbSet<Patient_cu> Patient_cu { get; set; }
        public virtual DbSet<PaymentTransactionType_p> PaymentTransactionType_p { get; set; }
        public virtual DbSet<PaymentType_p> PaymentType_p { get; set; }
        public virtual DbSet<Person_ChartOfAccount_cu> Person_ChartOfAccount_cu { get; set; }
        public virtual DbSet<Person_cu> Person_cu { get; set; }
        public virtual DbSet<Person_IdentificationCardType_cu> Person_IdentificationCardType_cu { get; set; }
        public virtual DbSet<Person_Phone_cu> Person_Phone_cu { get; set; }
        public virtual DbSet<PersonChartOtAccountType_p> PersonChartOtAccountType_p { get; set; }
        public virtual DbSet<PersonRelativeType_p> PersonRelativeType_p { get; set; }
        public virtual DbSet<PersonTitle_p> PersonTitle_p { get; set; }
        public virtual DbSet<PersonType_p> PersonType_p { get; set; }
        public virtual DbSet<PhoneType_p> PhoneType_p { get; set; }
        public virtual DbSet<PriceType_p> PriceType_p { get; set; }
        public virtual DbSet<Region_cu> Region_cu { get; set; }
        public virtual DbSet<Religion_p> Religion_p { get; set; }
        public virtual DbSet<Role_p> Role_p { get; set; }
        public virtual DbSet<RoleRegistration_cu> RoleRegistration_cu { get; set; }
        public virtual DbSet<Service_cu> Service_cu { get; set; }
        public virtual DbSet<ServiceCategory_cu> ServiceCategory_cu { get; set; }
        public virtual DbSet<ServiceType_p> ServiceType_p { get; set; }
        public virtual DbSet<SizeUnitMeasure_p> SizeUnitMeasure_p { get; set; }
        public virtual DbSet<Supplier_cu> Supplier_cu { get; set; }
        public virtual DbSet<SupplierType_p> SupplierType_p { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tax_cu> Tax_cu { get; set; }
        public virtual DbSet<Tax_p> Tax_p { get; set; }
        public virtual DbSet<TemperatureUnit_p> TemperatureUnit_p { get; set; }
        public virtual DbSet<TimeDuration_p> TimeDuration_p { get; set; }
        public virtual DbSet<UnitMeasurment_cu> UnitMeasurment_cu { get; set; }
        public virtual DbSet<UnitMeasurment_p> UnitMeasurment_p { get; set; }
        public virtual DbSet<User_Application_cu> User_Application_cu { get; set; }
        public virtual DbSet<User_cu> User_cu { get; set; }
        public virtual DbSet<User_UserGroup_cu> User_UserGroup_cu { get; set; }
        public virtual DbSet<UserGroup_Application_cu> UserGroup_Application_cu { get; set; }
        public virtual DbSet<UserGroup_cu> UserGroup_cu { get; set; }
        public virtual DbSet<WeightUnit_p> WeightUnit_p { get; set; }
        public virtual DbSet<WorkingShiftTitle_cu> WorkingShiftTitle_cu { get; set; }
    
        public virtual ObjectResult<GetAppointmentTransactions_Result> GetAppointmentTransactions(Nullable<bool> isOnduty, Nullable<int> insertedYearFrom, Nullable<int> insertedMonthFrom, Nullable<int> insertedDayFrom, Nullable<int> insertedYearTo, Nullable<int> insertedMonthTo, Nullable<int> insertedDayTo, Nullable<int> appointmentStatusID, Nullable<int> appointmentTypeID, Nullable<int> serviceCategoryID, Nullable<int> serviceID, Nullable<int> doctorID, string patientInternalCode, string patientName, string patientPhone)
        {
            var isOndutyParameter = isOnduty.HasValue ?
                new ObjectParameter("IsOnduty", isOnduty) :
                new ObjectParameter("IsOnduty", typeof(bool));
    
            var insertedYearFromParameter = insertedYearFrom.HasValue ?
                new ObjectParameter("InsertedYearFrom", insertedYearFrom) :
                new ObjectParameter("InsertedYearFrom", typeof(int));
    
            var insertedMonthFromParameter = insertedMonthFrom.HasValue ?
                new ObjectParameter("InsertedMonthFrom", insertedMonthFrom) :
                new ObjectParameter("InsertedMonthFrom", typeof(int));
    
            var insertedDayFromParameter = insertedDayFrom.HasValue ?
                new ObjectParameter("InsertedDayFrom", insertedDayFrom) :
                new ObjectParameter("InsertedDayFrom", typeof(int));
    
            var insertedYearToParameter = insertedYearTo.HasValue ?
                new ObjectParameter("InsertedYearTo", insertedYearTo) :
                new ObjectParameter("InsertedYearTo", typeof(int));
    
            var insertedMonthToParameter = insertedMonthTo.HasValue ?
                new ObjectParameter("InsertedMonthTo", insertedMonthTo) :
                new ObjectParameter("InsertedMonthTo", typeof(int));
    
            var insertedDayToParameter = insertedDayTo.HasValue ?
                new ObjectParameter("InsertedDayTo", insertedDayTo) :
                new ObjectParameter("InsertedDayTo", typeof(int));
    
            var appointmentStatusIDParameter = appointmentStatusID.HasValue ?
                new ObjectParameter("AppointmentStatusID", appointmentStatusID) :
                new ObjectParameter("AppointmentStatusID", typeof(int));
    
            var appointmentTypeIDParameter = appointmentTypeID.HasValue ?
                new ObjectParameter("AppointmentTypeID", appointmentTypeID) :
                new ObjectParameter("AppointmentTypeID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientInternalCodeParameter = patientInternalCode != null ?
                new ObjectParameter("PatientInternalCode", patientInternalCode) :
                new ObjectParameter("PatientInternalCode", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientPhoneParameter = patientPhone != null ?
                new ObjectParameter("PatientPhone", patientPhone) :
                new ObjectParameter("PatientPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointmentTransactions_Result>("GetAppointmentTransactions", isOndutyParameter, insertedYearFromParameter, insertedMonthFromParameter, insertedDayFromParameter, insertedYearToParameter, insertedMonthToParameter, insertedDayToParameter, appointmentStatusIDParameter, appointmentTypeIDParameter, serviceCategoryIDParameter, serviceIDParameter, doctorIDParameter, patientInternalCodeParameter, patientNameParameter, patientPhoneParameter);
        }
    
        public virtual ObjectResult<GetCashBoxTransactions_Result> GetCashBoxTransactions(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cashBoxID, Nullable<int> cashBoxTransactionTypeID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cashBoxIDParameter = cashBoxID.HasValue ?
                new ObjectParameter("CashBoxID", cashBoxID) :
                new ObjectParameter("CashBoxID", typeof(int));
    
            var cashBoxTransactionTypeIDParameter = cashBoxTransactionTypeID.HasValue ?
                new ObjectParameter("CashBoxTransactionTypeID", cashBoxTransactionTypeID) :
                new ObjectParameter("CashBoxTransactionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCashBoxTransactions_Result>("GetCashBoxTransactions", fromDateParameter, toDateParameter, cashBoxIDParameter, cashBoxTransactionTypeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeesList_Result> GetEmployeesList(Nullable<bool> isOnDuty, Nullable<long> employeeID, Nullable<int> employeeTypeID)
        {
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesList_Result>("GetEmployeesList", isOnDutyParameter, employeeIDParameter, employeeTypeIDParameter);
        }
    
        public virtual ObjectResult<GetInentoryItemFinalQuantity_Result> GetInentoryItemFinalQuantity(Nullable<int> inventoryItemID, Nullable<int> inventoryItemCategoryID, Nullable<int> inventoryHousingID, Nullable<int> unitMeasurmentID)
        {
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            var inventoryItemCategoryIDParameter = inventoryItemCategoryID.HasValue ?
                new ObjectParameter("InventoryItemCategoryID", inventoryItemCategoryID) :
                new ObjectParameter("InventoryItemCategoryID", typeof(int));
    
            var inventoryHousingIDParameter = inventoryHousingID.HasValue ?
                new ObjectParameter("InventoryHousingID", inventoryHousingID) :
                new ObjectParameter("InventoryHousingID", typeof(int));
    
            var unitMeasurmentIDParameter = unitMeasurmentID.HasValue ?
                new ObjectParameter("UnitMeasurmentID", unitMeasurmentID) :
                new ObjectParameter("UnitMeasurmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInentoryItemFinalQuantity_Result>("GetInentoryItemFinalQuantity", inventoryItemIDParameter, inventoryItemCategoryIDParameter, inventoryHousingIDParameter, unitMeasurmentIDParameter);
        }
    
        public virtual int GetInventoryTransferTransactions(Nullable<int> inventoryTransactionTypeID, Nullable<int> inventoryHousingFromID, Nullable<int> inventoryHousingToID, string transactionSerial, Nullable<int> inventoryItemID, Nullable<int> inventoryCategoryID, Nullable<int> transactionYearFrom, Nullable<int> transactionYearTo, Nullable<int> transactionMonthFrom, Nullable<int> transactionMonthTo, Nullable<int> transactionDayFrom, Nullable<int> transactionDayTo)
        {
            var inventoryTransactionTypeIDParameter = inventoryTransactionTypeID.HasValue ?
                new ObjectParameter("InventoryTransactionTypeID", inventoryTransactionTypeID) :
                new ObjectParameter("InventoryTransactionTypeID", typeof(int));
    
            var inventoryHousingFromIDParameter = inventoryHousingFromID.HasValue ?
                new ObjectParameter("InventoryHousingFromID", inventoryHousingFromID) :
                new ObjectParameter("InventoryHousingFromID", typeof(int));
    
            var inventoryHousingToIDParameter = inventoryHousingToID.HasValue ?
                new ObjectParameter("InventoryHousingToID", inventoryHousingToID) :
                new ObjectParameter("InventoryHousingToID", typeof(int));
    
            var transactionSerialParameter = transactionSerial != null ?
                new ObjectParameter("TransactionSerial", transactionSerial) :
                new ObjectParameter("TransactionSerial", typeof(string));
    
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            var inventoryCategoryIDParameter = inventoryCategoryID.HasValue ?
                new ObjectParameter("InventoryCategoryID", inventoryCategoryID) :
                new ObjectParameter("InventoryCategoryID", typeof(int));
    
            var transactionYearFromParameter = transactionYearFrom.HasValue ?
                new ObjectParameter("TransactionYearFrom", transactionYearFrom) :
                new ObjectParameter("TransactionYearFrom", typeof(int));
    
            var transactionYearToParameter = transactionYearTo.HasValue ?
                new ObjectParameter("TransactionYearTo", transactionYearTo) :
                new ObjectParameter("TransactionYearTo", typeof(int));
    
            var transactionMonthFromParameter = transactionMonthFrom.HasValue ?
                new ObjectParameter("TransactionMonthFrom", transactionMonthFrom) :
                new ObjectParameter("TransactionMonthFrom", typeof(int));
    
            var transactionMonthToParameter = transactionMonthTo.HasValue ?
                new ObjectParameter("TransactionMonthTo", transactionMonthTo) :
                new ObjectParameter("TransactionMonthTo", typeof(int));
    
            var transactionDayFromParameter = transactionDayFrom.HasValue ?
                new ObjectParameter("TransactionDayFrom", transactionDayFrom) :
                new ObjectParameter("TransactionDayFrom", typeof(int));
    
            var transactionDayToParameter = transactionDayTo.HasValue ?
                new ObjectParameter("TransactionDayTo", transactionDayTo) :
                new ObjectParameter("TransactionDayTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInventoryTransferTransactions", inventoryTransactionTypeIDParameter, inventoryHousingFromIDParameter, inventoryHousingToIDParameter, transactionSerialParameter, inventoryItemIDParameter, inventoryCategoryIDParameter, transactionYearFromParameter, transactionYearToParameter, transactionMonthFromParameter, transactionMonthToParameter, transactionDayFromParameter, transactionDayToParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
